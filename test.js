const assert = require('assert');
Object.freeze(assert);
const sumOfOther = require('./sumOfOther');

describe('The sum of other elements', () => {
    it('1', () => {
    const solutions = sumOfOther([2, 3, 4, 1]);
    assert.deepEqual(solutions, [8, 7, 6, 9]);
    });

    it('2', () => {
    const solutions = sumOfOther([13, 21, 32, 6, 12, 25]);
    assert.deepEqual(solutions, [96, 88, 77, 103, 97, 84]);
    });

    it('3', () => {
    const solutions = sumOfOther([-24, -40, -23, -2, -44, -3, -50, -14, -38, -45, -30, -42, -22, -26, -19]);
    assert.deepEqual(solutions, [-398, -382, -399, -420, -378, -419, -372, -408, -384, -377, -392, -380, -400, -396, -403]);
    });

    it('4', () => {
    const solutions = sumOfOther([20, 33, 33, 30, 40, 44, 12, 12, 32, 6, 6, 13, 1, 14, 41, 39, 23, 39, 29, 14, 43, 16, 31, 2, 26, 28, 23, 47, 26, 3, 15, 16, 5, 6, 15, 43, 20, 43, 34, 4, 49, 41]);
    assert.deepEqual(solutions, [997, 984, 984, 987, 977, 973, 1005, 1005, 985, 1011, 1011, 1004, 1016, 1003, 976, 978, 994, 978, 988, 1003, 974, 1001, 986, 1015, 991, 989, 994, 970, 991, 1014, 1002, 1001, 1012, 1011, 1002, 974, 997, 974, 983, 1013, 968, 976]);
    });

    it('5', () => {
    const solutions = sumOfOther([26, 41, 14, 1, 4, 46, 28, 3, 36, 42, 20, 3, 13, 28, 3, 49, 28, 39, 10, 17, 40, 46, 46, 13, 22, 4, 10, 44, 19, 13, 39, 48, 30, 9, 19, 8, 43, 11, 41, 9, 46, 45, 15, 1, 47, 39, 8, 24, 46, 10, 35, 2, 8, 30, 44, 5, 49, 11, 18, 45]);
    assert.deepEqual(solutions, [1467, 1452, 1479, 1492, 1489, 1447, 1465, 1490, 1457, 1451, 1473, 1490, 1480, 1465, 1490, 1444, 1465, 1454, 1483, 1476, 1453, 1447, 1447, 1480, 1471, 1489, 1483, 1449, 1474, 1480, 1454, 1445, 1463, 1484, 1474, 1485, 1450, 1482, 1452, 1484, 1447, 1448, 1478, 1492, 1446, 1454, 1485, 1469, 1447, 1483, 1458, 1491, 1485, 1463, 1449, 1488, 1444, 1482, 1475, 1448]);
    });

    it('6', () => {
    const solutions = sumOfOther([37, 49, 48, 46, 44, 14, 3, 48, 15, 22, 39, 17, 13, 26, 17, 2, 17]);
    assert.deepEqual(solutions, [420, 408, 409, 411, 413, 443, 454, 409, 442, 435, 418, 440, 444, 431, 440, 455, 440]);
    });

    it('7', () => {
    const solutions = sumOfOther([37, 32, 24]);
    assert.deepEqual(solutions, [56, 61, 69]);
    });

    it('8', () => {
    const solutions = sumOfOther([-42, -30, -38, -11, -24, -20, -33, -41, -39]);
    assert.deepEqual(solutions, [-236, -248, -240, -267, -254, -258, -245, -237, -239]);
    });

    it('9', () => {
    const solutions = sumOfOther([-11, -44, -14, -6, -48, -13, -13, -7, -29, -24, -13, -11, -8, -4, -32, -14, -33, -7, -46, -33, -24, -3, -21, -37, -25, -2, -14, -2, -13, -48, -46, -35, -36, -16, -29, -41, -8, -17]);
    assert.deepEqual(solutions, [-816, -783, -813, -821, -779, -814, -814, -820, -798, -803, -814, -816, -819, -823, -795, -813, -794, -820, -781, -794, -803, -824, -806, -790, -802, -825, -813, -825, -814, -779, -781, -792, -791, -811, -798, -786, -819, -810]);
    });

    it('10', () => {
    const solutions = sumOfOther([9, 7, 9, 12, 23, 12, 17, 23, 24, 26, 9, 24, 2, 22, 9, 9, 4, 11, 4, 22, 14, 7, 29, 20, 18, 18, 1, 22, 2, 10, 19, 21, 29, 27, 2, 5, 10, 5, 20, 18, 8, 6, 23, 27, 8, 10, 6, 10, 5, 18, 3, 30, 29, 29, 17, 14, 3, 23, 20, 9, 28, 19, 16, 7, 23, 22, 20, 28, 4, 17, 10, 13, 8, 11, 7, 23, 1, 2, 1, 24, 22, 11, 27, 26, 23, 27, 24, 21, 2, 22, 17, 16, 13, 26, 25, 1, 12, 20]);
    assert.deepEqual(solutions, [1483, 1485, 1483, 1480, 1469, 1480, 1475, 1469, 1468, 1466, 1483, 1468, 1490, 1470, 1483, 1483, 1488, 1481, 1488, 1470, 1478, 1485, 1463, 1472, 1474, 1474, 1491, 1470, 1490, 1482, 1473, 1471, 1463, 1465, 1490, 1487, 1482, 1487, 1472, 1474, 1484, 1486, 1469, 1465, 1484, 1482, 1486, 1482, 1487, 1474, 1489, 1462, 1463, 1463, 1475, 1478, 1489, 1469, 1472, 1483, 1464, 1473, 1476, 1485, 1469, 1470, 1472, 1464, 1488, 1475, 1482, 1479, 1484, 1481, 1485, 1469, 1491, 1490, 1491, 1468, 1470, 1481, 1465, 1466, 1469, 1465, 1468, 1471, 1490, 1470, 1475, 1476, 1479, 1466, 1467, 1491, 1480, 1472]);
    });
});